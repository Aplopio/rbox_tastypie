from django.http import HttpResponse
from tastypie import http
import inspect

def whoami():
    """for python version greater than equal to 2.7"""
    return inspect.stack()[1][3]
    
class ResponseHandler(object):
    def get_request_class(self, request):
        """Returns the class of request in lower case"""
        return request.__class__.__name__.lower()

    def return_response_type(self, request):
        method = getattr(self, '%s_%s' % (whoami(), self.get_request_class(request)))
        return method(request)
        
    def return_bad_request(self, request, *args, **kwargs):
        method = getattr(self, 'return_bad_request_%s' % self.get_request_class(request))
        return method(request, *args, **kwargs)
        
    def return_not_implemented(self, request, *args, **kwargs):
        method = getattr(self, 'return_not_implemented_%s' % self.get_request_class(request))
        return method(request, *args, **kwargs)

    def return_no_content(self, request, *args, **kwargs):
        method = getattr(self, 'return_no_content_%s' % self.get_request_class(request))
        return method(request, *args, **kwargs)
            
    def create_response(self, request, content, content_type=None, **response_kwargs):
        method = getattr(self, '%s_%s' % (whoami(), self.get_request_class(request)))
        return method(request, content, content_type, **response_kwargs)

    def return_response_type_wsgirequest(self, request):
        return HttpResponse

    def create_response_wsgirequest(self, request, content, content_type=None, **response_kwargs):
        return HttpResponse(content=content, content_type=content_type,**response_kwargs)